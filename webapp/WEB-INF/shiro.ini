[main]
jdbcRealm=org.apache.shiro.realm.jdbc.JdbcRealm

#Configuration dataBase
dataSource = org.postgresql.ds.PGPoolingDataSource
dataSource.serverName = containers-us-west-74.railway.app
dataSource.databaseName = railway
dataSource.portNumber = 5926
#dataSource.ssl = true
dataSource.sslfactory = org.postgresql.ssl.NonValidatingFactory
dataSource.user = postgres
dataSource.password = FWhhNeGLMw4YrTuLClkQ
jdbcRealm.dataSource = $dataSource

jdbcRealm.authenticationQuery = SELECT contrase√±a FROM USUARIOS WHERE correo = ?
jdbcRealm.userRolesQuery = SELECT rol FROM USUARIOS WHERE correo = ?

# Let's use some in-memory caching to reduce the number of runtime lookups against a remote user store.
# A real application might want to use a more robust caching solution (e.g. ehcache or a
# distributed cache).  When using such caches, be aware of your cache TTL settings: too high
# a TTL and the cache won't reflect any potential changes in Stormpath fast enough.  Too low
# and the cache could evict too often, reducing performance.
cacheManager = org.apache.shiro.cache.MemoryConstrainedCacheManager
securityManager.cacheManager = $cacheManager

authc=org.apache.shiro.web.filter.authc.FormAuthenticationFilter
authc.loginUrl = /tickets/login.xhtml

#passwordMatcher
passwordMatcher = org.apache.shiro.authc.credential.PasswordMatcher
credentialsMatcher = org.apache.shiro.authc.credential.HashedCredentialsMatcher
credentialsMatcher.hashAlgorithmName = SHA-256
credentialsMatcher.hashIterations=1
credentialsMatcher.storedCredentialsHexEncoded = true

onlynot=fusePong.login.OnlyNotAutenticated
onlynot.welcomeurl=/tickets/resource.xhtml


[urls]

/logout = logout
/=onlynot
/gestor/reserve.xhtml=authc
/gestor/login.xhtml=onlynot
/gestor/reservation.xhtml=authc
/gestor/registerResource.xhtml=authc , roles[A]
/gestor/resource.xhtml=anon
/gestor/reservation.xhtml=authc
/gestor/reservationExpired.xhtml=authc
/gestor/reservationsCancelled.xhtml=authc
/gestor/Schedule.xhtml=authc
/gestor/report.xhtml=authc



